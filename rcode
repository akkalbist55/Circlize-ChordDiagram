getwd()
setwd("/home/akkal/RProject/CIRCOS/")

library("circlize")
df <- read.table("Data.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
#names(df1) <- c("Wildlife","WT","arrest_district")

df2 = data.frame(from = paste(df[[2]]), to = paste(df[[7]]), value = df[[3]], df[[4]], df[[5]], stringsAsFactors = FALSE)
#chordDiagram(df2)
col = rand_color(nrow(df))
def = df[df2[[4]] > 10.10, ]
def

sp = unique(c(df[[4]]))
from = paste(df[[2]], sep = ",")
to = paste(df[[7]], sep = ",")
grid.col <- col
dff <- data.frame(from, to, stringsAsFactors = FALSE)
circos.clear()
circos.par(start.degree = 90, gap.degree = 5, track.margin = c(-0.1, 0.1), points.overflow.warning = FALSE)
par(mar = rep(0, 4))


#Plot chord diagram from df2 data frame
chordDiagram(df2, annotationTrack = "grid", transparency = 0,
             preAllocateTracks = list(track.height = 0.01))

#plot axis from plotted chord diagram
for(si in get.all.sector.index()) {
  circos.axis(h = "top", labels.cex = 0.3, sector.index = si, track.index = 2)
}
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
  xlim = get.cell.meta.data("xlim")
  ylim = get.cell.meta.data("ylim")
  sector.name = get.cell.meta.data("sector.index")
  
  circos.lines(xlim, c(mean(ylim), mean(ylim)))
  for(p in seq(0, 0, by = 0.005)) {
    circos.text(p*(xlim[2] - xlim[1]) + xlim[1], mean(ylim), p, cex = 0.04, adj = c(0.5, 0.02), niceFacing = TRUE)
  }
  circos.text(mean(xlim), 2, sector.name, facing = "clockwise" , niceFacing = TRUE)
}, bg.border = TRUE)

circos.clear()

circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
  xlim = get.cell.meta.data("xlim")
  ylim = get.cell.meta.data("ylim")
  sector.name = get.cell.meta.data("sector.index")
  
  circos.lines(xlim, c(mean(ylim), mean(ylim)), lty = 3)
  for(p in seq(0, 1, by = 0.25)) {
    circos.text(p*(xlim[2] - xlim[1]) + xlim[1], mean(ylim), p, cex = 0.4, adj = c(0.5, -0.2), niceFacing = TRUE)
  }
  circos.text(mean(xlim), 1.4, sector.name, niceFacing = TRUE)
}, bg.border = NA)




chordDiagram(x = df2, grid.col = dff$col, transparency = 0.05,
             order = dff$region, directional = TRUE,
             direction.type = c("diffHeight"), diffHeight  = 0.005,
             annotationTrack = "grid", annotationTrackHeight = c(0.05, 0.1),
             link.arr.type = "big.arrow", link.sort = TRUE, link.largest.ontop = TRUE)


circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
  xlim = get.cell.meta.data("xlim")
  xplot = get.cell.meta.data("xplot")
  ylim = get.cell.meta.data("ylim")
  sector.name = get.cell.meta.data("sector.index")
  if(abs(xplot[1] - xplot[1]) < 10) {
    circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
                niceFacing = TRUE, adj = c(0, 0.5))
  } else {
    circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
                niceFacing = TRUE, adj = c(0.5, 0))
  }
}, bg.border = grid.col)



















#circos.text(x = mean(xlim), y = 1.5, 
#           labels = country, facing = "bending", adj = c(0.5, 0), cex = 1, niceFacing = TRUE)



#chordDiagram(df2, annotationTrack = "grid", transparency = 0, preAllocateTracks = list(track.height = 0.001))
res = chordDiagram(x = df2, transparency = 0.25,
                   directional = 0, grid.col = grid.col,
                   #order = dff,
                   direction.type = c("arrows", "diffHeight"), diffHeight  = -0.04,
                   annotationTrack = c("grid"), annotationTrackHeight = c(0.05, 0.1),
                   link.arr.type = "big.arrow", link.sort = TRUE, link.largest.ontop = TRUE)




circos.trackPlotRegion(
  track.index = 1, 
  bg.border = NA, 
  panel.fun = function(x, y) {
    xlim = get.cell.meta.data("xlim")
    sector.index = get.cell.meta.data("sector.index")
    country = dff$country[dff$country == sector.index]
    
    circos.text(x = mean(xlim), y = 1.5, 
                labels = country, facing = "bending", adj = c(0.5, 0), cex = 1, niceFacing = TRUE)
  }
)

for(i in seq_len(nrow(res))) {
  circos.text(x = res$x1[i] - res$value[i]/2, y = 0.5, round(10^(res$value[i])), facing = "inside",
              niceFacing = TRUE, adj = c(0.5, 0.5), cex = 0.5, col = "white", sector.index = res$rn[i], track.index = 1)
  circos.text(x = res$x2[i] - res$value[i]/2, y = 0.5, round(10^(res$value[i])), facing = "inside",
              niceFacing = TRUE, adj = c(0.5, 0.5), cex = 0.5, col = "white", sector.index = res$cn[i], track.index = 1)
}


circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
  xlim = get.cell.meta.data("xlim")
  sector.index = get.cell.meta.data("sector.index")
  #text direction (dd) and adjusmtents (aa)
  theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
  dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
  aa = c(1, 0.5)
  if(theta < 90 || theta > 270)  aa =c(0, 0.5)
  circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
  circos.axis(h="top", track.index = 2, major.at = seq(0, max(xlim), by=5), minor.ticks=1, 
              labels.away.percentage = 0.1, labels.niceFacing = TRUE )
}, bg.border = NA)


circos.clear()




library(circlize)

mat = matrix(sample(1:100, 18, replace = TRUE), 3, 6)
rownames(mat) = letters[1:3]
colnames(mat) = LETTERS[1:6]
rn = rownames(mat)
cn = colnames(mat)

circos.par(gap.after = c(rep(2, nrow(mat)-1), 10, rep(2, ncol(mat)-1), 10))


chordDiagram(x = df0, grid.col = df1$col, transparency = 0.25,
             order = df1$region, directional = 1,
             direction.type = c("arrows", "diffHeight"), diffHeight  = -0.04,
             annotationTrack = "grid", annotationTrackHeight = c(0.05, 0.1),
             link.arr.type = "big.arrow", link.sort = TRUE, link.largest.ontop = TRUE)






chordDiagram(mat, annotationTrack = "grid", transparency = 0.5,
             preAllocateTracks = list(track.height = 0.1))
for(si in get.all.sector.index()) {
  circos.axis(h = "top", labels.cex = 0.3, sector.index = si, track.index = 2)
}
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
  xlim = get.cell.meta.data("xlim")
  ylim = get.cell.meta.data("ylim")
  sector.name = get.cell.meta.data("sector.index")
  
  circos.lines(xlim, c(mean(ylim), mean(ylim)), lty = 3)
  for(p in seq(0, 1, by = 0.25)) {
    circos.text(p*(xlim[2] - xlim[1]) + xlim[1], mean(ylim), p, cex = 0.4, adj = c(0.5, -0.2), niceFacing = TRUE)
  }
  circos.text(mean(xlim), 1.4, sector.name, niceFacing = TRUE)
}, bg.border = NA)
circos.clear()
